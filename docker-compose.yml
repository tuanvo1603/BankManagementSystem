version: '3'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "4318:4318"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
    environment:
      - LOG_LEVEL=INFO
  read:
    image: grafana/loki:2.9.2
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      eazybank:
        aliases:
          - loki

  write:
    image: grafana/loki:2.9.2
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  promtail:
    image: grafana/promtail:2.9.2
    volumes:
      - ../observability/promtail/promtail-local-config.yaml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-deploy-service


  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.gmail.com:587
      - gf_smtp_user=phamtranducc@gmail.com
      - GF_SMTP_PASSWORD=hjia vodh qekq tzye
      - gf_smtp_from_address=grafana@gmail.com
      - GF_SMTP_FROM_NAME=Grafana
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  db:
    image: mysql:latest
    container_name: transaction_db
    ports:
      - "3306:3306"
    environment:
#      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: transactiondatabase, moneyaccountdatabase, auth-service
      MYSQL_USER: root
      MYSQL_PASSWORD: Satgaino1@

  transaction-service:
    build: C:\Users\vx\OneDrive - Hanoi University of Science and Technology\Documents\Spring Boot\BankManagementSystem\transaction-service
    container_name: transaction-service-container
    restart: always
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/transactiondatabase
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: Satgaino1@
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
    ports:
      - "8091:8091"
    depends_on:
      - db
      - eureka-server
      - kafka
    healthcheck:
      test: "curl --fail --silent localhost:8091/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
#      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config

  account-service:
    build: C:\Users\vx\OneDrive - Hanoi University of Science and Technology\Documents\Spring Boot\BankManagementSystem\currency-and-account-service
    container_name: account-service-container
    restart: always
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/moneyaccountdatabase
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: Satgaino1@
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
    ports:
      - "8090:8090"
    depends_on:
      - db
      - config-server
      - eureka-server
      - kafka
    healthcheck:
      test: "curl --fail --silent localhost:8090/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      #      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config

  user-service:
    build: C:\Users\vx\OneDrive - Hanoi University of Science and Technology\Documents\Spring Boot\BankManagementSystem\auth-service
    container_name: user-service-container
    restart: always
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/auth-service
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: Satgaino1@
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
    ports:
      - "8088:8088"
    depends_on:
      - db
      - eureka-server
    healthcheck:
      test: "curl --fail --silent localhost:8088/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      #      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config

  api-gateway:
    build: C:\Users\vx\OneDrive - Hanoi University of Science and Technology\Documents\Spring Boot\BankManagementSystem\api-gateway
    container_name: api-gateway-container
    restart: always
    ports:
      - "8080:8080"
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      #      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config

  config-server:
    build: C:\Users\vx\OneDrive - Hanoi University of Science and Technology\Documents\Spring Boot\BankManagementSystem\config-server
    container_name: config-server-container
    restart: always
    ports:
      - "9005:9005"
    healthcheck:
      test: "curl --fail --silent localhost:9005/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      #      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config

  eureka-server:
    build: C:\Users\vx\OneDrive - Hanoi University of Science and Technology\Documents\Spring Boot\BankManagementSystem\eureka-server
    container_name: eureka-server-container
    restart: always
    ports:
      - "8761:8761"
    healthcheck:
      test: "curl --fail --silent localhost:8761/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      #      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config

networks:
  eazybank:
    driver: "bridge"
